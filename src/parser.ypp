%{
#include <stdio.h>
#include <string>
#include <iostream>

#define output cout

#include "../src/Memory.hpp"
#include "../src/Variable.hpp"
#include "../src/Value.hpp"
#include "../src/io.hpp"

using namespace std;

int yylex();
int yyerror(string);
extern FILE *yyin;
extern int yylineno;

Memory* memory;

%}

%union token_val {
    char* pid;
    long long num;
    Variable* var;
    Value val;
}

%start program
%token DECLARE T_BEGIN END
%token ASSIGN IF THEN ELSE ENDIF WHILE DO ENDWHILE ENDDO FOR FROM TO ENDFOR
%token EQ NEQ LE GE LEQ GEQ
%token <num> NUM
%token <pid> PID
%token READ WRITE SEMICOLON LPAREN RPAREN COMMA COLON

%left MINUS PLUS
%left TIMES DIV MOD

%token ERROR

%type <var> identifier


%%
program: DECLARE declarations T_BEGIN commands END
       | T_BEGIN commands END
       ;

declarations: declarations COMMA declaration 
            | declarations COMMA arr_declaration
            | declaration
            | arr_declaration
            |
            ;

declaration: PID { memory->reserve_variable($1); }
           ;

arr_declaration: PID LPAREN NUM COLON NUM RPAREN { memory->reserve_array($1, $3, $5); }
               ;

commands: commands command
        | command
        ;

command: identifier ASSIGN expression SEMICOLON
       | IF condition THEN commands ELSE commands ENDIF
       | IF condition THEN commands ENDIF
       | WHILE condition DO commands ENDWHILE
       | DO commands WHILE condition ENDDO
       | FOR PID FROM value TO value DO commands ENDFOR
       | READ identifier SEMICOLON
       | WRITE value SEMICOLON
       ;

expression: value
          | value PLUS value
          | value MINUS value
          | value TIMES value
          | value DIV value
          | value MOD value
          ;

condition: value EQ value
         | value NEQ value
         | value LE value
         | value GE value
         | value LEQ value
         | value GEQ value
         ;

value: NUM          
     | identifier   
     ;

identifier: PID                   {
                                      try
                                      {
                                          $$ = memory->get_variable($1);  
                                      }
                                      catch (string error)
                                      {
                                          yyerror(error);
                                      }
                                  }
          | PID LPAREN PID RPAREN {
                                      try
                                      {
                                          $$ = memory->get_variable($1, $3);
                                      }
                                      catch (string error)
                                      {
                                          yyerror(error);
                                      }
                                  }
          | PID LPAREN NUM RPAREN {
                                      try
                                      {
                                          $$ = memory->get_variable($1, $3);
                                      }
                                      catch (string error)
                                      {
                                          yyerror(error);
                                      }
                                  }
          ;

%%

int yyerror(string s)
{
    cout << "Error in line " << yylineno << ": " << s << endl;
    return 0;
}

int main(int argc, char* argv[])
{
    if (argc != 2)
    {
        cout << "Not enough arguments" << argc << endl;
        return 1;
    }

    memory = new Memory();

    yyin = fopen(argv[1], "r");
    yyparse();
    return 0;
}
