%{
#define YYDEBUG 1
#include <stdio.h>
#include <string>
#include <iostream>
#include <fstream>

#include "../src/Memory.hpp"
#include "../src/Variable.hpp"
#include "../src/Constant.hpp"
#include "../src/Value.hpp"
#include "../src/Code.hpp"
#include "../src/labels.hpp"

using namespace std;

int yylex();
int yyerror(string);
extern FILE *yyin;
extern int yylineno;

Code* code;
Memory* memory;

%}

%union token_val {
    string* pid;
    long long num;
    Variable* var;
    Value* val;
    ConditionLabel* cond_lbl;
    IfLabel* if_lbl;
    DoWhileLabel* do_lbl;
    ForLabel* for_lbl;
}

%start program

%token DECLARE T_BEGIN END
%token <if_lbl> IF
%token WHILE
%token <do_lbl> DO
%token <for_lbl> FOR 
%token THEN ELSE ENDIF FROM TO DOWNTO ENDFOR ENDWHILE ENDDO
%token READ WRITE       
%token LE GE LEQ GEQ EQ NEQ
%token ASSIGN
%token ERROR

%token <pid> PID
%token <num> NUM

%type <var> identifier
%type <val> value
%type <cond_lbl> condition

%left MINUS PLUS
%left TIMES DIV MOD
%token SEMICOLON COLON COMMA LPAREN RPAREN



%%
program: DECLARE declarations T_BEGIN commands END
       | T_BEGIN commands END
       ;

declarations: declarations COMMA declaration 
            | declarations COMMA arr_declaration
            | declaration
            | arr_declaration
            ;

declaration: PID { memory->reserve_variable(*$1); }
           ;

arr_declaration: PID LPAREN NUM COLON NUM RPAREN { memory->reserve_array(*$1, $3, $5); }
               ;

commands: commands command
        | command
        ;

command: identifier ASSIGN expression SEMICOLON          { code->assign($1); } 
       | IF condition THEN commands                      { $1 = code->if_else_first($2); }
         ELSE commands ENDIF                             { code->if_else_second($1); }
       | IF condition THEN commands ENDIF                { code->single_if($2); }
       | WHILE condition DO commands ENDWHILE            { code->while_loop($2); }
       | DO                                              { $1 = code->do_loop_first(); }
         commands WHILE condition ENDDO                  { code->do_loop_second($1, $5); }
       | FOR PID FROM value TO value                     { $1 = code->for_loop_first(*$2, $4, $6, true); }
         DO commands ENDFOR                              { code->for_loop_second($1, true); }
       | FOR PID FROM value DOWNTO value                 { $1 = code->for_loop_first(*$2, $4, $6, false); }
         DO commands ENDFOR                              { code->for_loop_second($1, false); }
       | READ identifier SEMICOLON                       { code->read($2); }
       | WRITE value SEMICOLON                           { code->write($2); }
       ;

expression: value               { code->construct_val($1); }
          | value PLUS value    { code->add($1, $3); }
          | value MINUS value   { code->subtract($1, $3); }
          | value TIMES value   { code->multiply($1, $3); }
          | value DIV value     { code->divide($1, $3); }
          | value MOD value     { code->modulo($1, $3); }
          ;

condition: value EQ value  { $$ = code->equal($1, $3); }
         | value NEQ value { $$ = code->not_equal($1, $3); }
         | value LE value  { $$ = code->less($1, $3); }
         | value GE value  { $$ = code->greater($1, $3); }
         | value LEQ value { $$ = code->less_or_equal($1, $3); }
         | value GEQ value { $$ = code->greater_or_equal($1, $3); }
         ;

value: NUM          { $$ = new Constant($1); }
     | identifier   { $$ = $1; }
     ;

identifier: PID                   {
                                    $$ = memory->get_variable(*$1);  
                                  }
          | PID LPAREN PID RPAREN {
                                    $$ = memory->get_variable(*$1, *$3);
                                  }
          | PID LPAREN NUM RPAREN {
                                    $$ = memory->get_variable(*$1, $3);
                                  }
          ;

%%

int yyerror(string s)
{
    cout << "\033[1;31m" 
         << "Error in line " << yylineno << ": " 
         << "\033[0m"
         << s << endl;
    return 0;
}

int main(int argc, char* argv[])
{
    // yydebug = 1;
    if (argc != 3)
    {
        cout << "Not enough arguments" << argc << endl;
        return 1;
    }

    memory = new Memory();
    code = new Code(memory);

    yyin = fopen(argv[1], "r");
    try
    {
        yyparse();
        ofstream output;
        output.open(argv[2]);
        output << *code;
        output.close();
    }
    catch (string error)
    {
        yyerror(error);
    }

    return 0;
}
